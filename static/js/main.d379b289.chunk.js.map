{"version":3,"sources":["Components/Persons/Person/Person.js","Components/Persons/Persons.js","Components/Cockpit/Cockpit.js","Container/App.js","serviceWorker.js","index.js"],"names":["person","props","className","onClick","click","name","age","type","onChange","changed","children","persons","map","index","clicked","key","event","id","cockpit","buttonStyle","length","push","join","x","App","state","otherState","showPersons","showButton","switchNameHandler","newName","setState","nameChangedHandler","personIndex","findIndex","p","target","value","togglePersonHandler","show","deletePersonHandler","splice","this","Persons","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAYeA,G,YAVF,SAACC,GAEV,OACI,yBAAKC,UAAU,UACX,uBAAGC,QAASF,EAAMG,OAAlB,QAA+BH,EAAMI,KAArC,YAAoDJ,EAAMK,IAA1D,qBACA,2BAAOC,KAAK,OAAOC,SAAUP,EAAMQ,UACnC,2BAAIR,EAAMS,aCIPC,EATA,SAACV,GAAD,OAAUA,EAAMU,QAAQC,KAAI,SAACZ,EAAOa,GAE/C,OAAO,kBAAC,EAAD,CACHT,MAAO,kBAAIH,EAAMa,QAAQD,IACzBR,KAAML,EAAOK,KACbC,IAAKN,EAAOM,IACZS,IAAKf,EAAOe,IACZN,QAAS,SAACO,GAAD,OAASf,EAAMQ,QAAQO,EAAMhB,EAAOiB,WCmBtCC,G,MA1BD,SAACjB,GACX,IAAMkB,EAAY,GAUlB,OATGlB,EAAMU,QAAQS,OAAO,GAEpBD,EAAYE,KAAK,OAEK,IAAvBpB,EAAMU,QAAQS,QAEbD,EAAYE,KAAK,QAIjB,yBAAKnB,UAAU,WACX,wCACA,uBAAGA,UAAWiB,EAAYG,KAAK,MAA/B,OACCrB,EAAMsB,EAAG,EACN,4BACIrB,UAAW,QACXC,QAASF,EAAMa,SAFnB,yBAKE,QCwDHU,E,4MA3EXC,MAAM,CACFd,QAAQ,CACJ,CAACN,KAAK,QAASC,IAAI,GAAGW,GAAG,QACzB,CAACZ,KAAK,UAAWC,IAAI,GAAGW,GAAG,SAE/BS,WAAW,mBACXC,aAAY,EACZC,WAAW,G,EAEfC,kBAAkB,SAACC,GAEf,EAAKC,SAAS,CACVpB,QAAS,CACL,CAACN,KAAMyB,EAASxB,IAAK,IACrB,CAACD,KAAM,QAASC,IAAK,Q,EAKjC0B,mBAAmB,SAAChB,EAAMC,GACtB,IAAMgB,EAAY,EAAKR,MAAMd,QAAQuB,WAAU,SAAAC,GAC3C,OAAOA,EAAElB,KAAKA,KAEZjB,EAAO,eACN,EAAKyB,MAAMd,QAAQsB,IAG1BjC,EAAOK,KAAKW,EAAMoB,OAAOC,MACzB,IAAM1B,EAAQ,YAAI,EAAKc,MAAMd,SAC7BA,EAAQsB,GAAajC,EACrB,EAAK+B,SAAS,CAAEpB,QAAQA,K,EAE5B2B,oBAAoB,WAChB,IAAMC,EAAK,EAAKd,MAAME,YACtB,EAAKI,SAAS,CAACJ,aAAaY,K,EAGhCC,oBAAoB,SAACP,GAEjB,IAAMtB,EAAQ,YAAI,EAAKc,MAAMd,SAC7BA,EAAQ8B,OAAOR,EAAY,GAC3B,EAAKF,SAAS,CAACpB,QAAQA,IACvB,EAAKoB,UAAS,SAAAN,GAAK,MAAK,CACpBG,WAAY,EAAKH,MAAMG,kB,uDAM3B,IAAIjB,EAAQ,KAaZ,OAXG+B,KAAKjB,MAAME,cAEVhB,EACI,6BACI,kBAACgC,EAAD,CAAShC,QAAS+B,KAAKjB,MAAMd,QACpBG,QAAS4B,KAAKF,oBACd/B,QAASiC,KAAKV,uBAM/B,yBAAK9B,UAAWsB,GACjB,kBAAC,EAAD,CACIG,YAAae,KAAKjB,MAAME,YACxBhB,QAAS+B,KAAKjB,MAAOd,QACrBG,QAAS4B,KAAKJ,oBACdf,EAAGmB,KAAKjB,MAAMG,aAEZjB,O,GAvECiC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d379b289.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Person.css';\r\nconst person=(props)=>\r\n{\r\n    return (\r\n        <div className=\"Person\">\r\n            <p onClick={props.click}>I am {props.name} and I'm {props.age}years old person.</p>\r\n            <input type=\"text\" onChange={props.changed}/>\r\n            <p>{props.children}</p>\r\n        </div>\r\n)\r\n};\r\nexport default person;","import React from 'react';\r\nimport Person from \"./Person/Person\";\r\n\r\nconst persons =(props)=> props.persons.map((person,index)=>\r\n{\r\n    return <Person\r\n        click={()=>props.clicked(index)}\r\n        name={person.name}\r\n        age={person.age}\r\n        key={person.key}\r\n        changed={(event)=>props.changed(event,person.id)}/>\r\n});\r\nexport default persons;","import React from 'react';\r\nimport './Cockpit.css';\r\n\r\nconst cockpit=(props)=>{\r\n    const buttonStyle=[];\r\n    if(props.persons.length<2)\r\n    {\r\n        buttonStyle.push('red');\r\n    }\r\n    if(props.persons.length===1)\r\n    {\r\n        buttonStyle.push('bold');\r\n    }\r\n\r\n    return(\r\n        <div className=\"Cockpit\">\r\n            <h1>Hi Kokil</h1>\r\n            <p className={buttonStyle.join(' ')}>Hey</p>\r\n            {props.x <2 ?\r\n                <button\r\n                    className={'style'}\r\n                    onClick={props.clicked}>\r\n                    Click me to see magic\r\n                </button>\r\n                : null\r\n            }\r\n        </div>\r\n    );\r\n};\r\nexport default cockpit;\r\n","import React,{Component} from 'react';\nimport './App.css';\nimport Persons from '../Components/Persons/Persons';\nimport Cockpit from '../Components/Cockpit/Cockpit'\nclass App extends Component{\n    state={\n        persons:[\n            {name:'kokil' ,age:18,id:'wxy1'},\n            {name:'utkarsh' ,age:24,id:'wxy2'}\n        ],\n        otherState:'some other value',\n        showPersons:false,\n        showButton:0\n    }\n    switchNameHandler=(newName)=>\n    {\n        this.setState({\n            persons: [\n                {name: newName, age: 18},\n                {name: 'kokil', age: 24}\n            ]\n        } )\n    }\n\n    nameChangedHandler=(event,id)=>{\n        const personIndex=this.state.persons.findIndex(p=>{\n            return p.id===id;\n        })\n        const person={\n            ...this.state.persons[personIndex]\n        };\n        //const person=Object.assign({},this.state.persons[personIndex]);\n        person.name=event.target.value;\n        const persons=[...this.state.persons];\n        persons[personIndex]=person;\n        this.setState({ persons:persons}  );\n    }\n    togglePersonHandler=()=>{\n        const show=this.state.showPersons;\n        this.setState({showPersons:!show});\n    }\n\n    deletePersonHandler=(personIndex)=>\n    {\n        const persons=[...this.state.persons];\n        persons.splice(personIndex,1);\n        this.setState({persons:persons});\n        this.setState(state => ({\n            showButton: this.state.showButton++\n        }));\n    }\n\n    render(){\n\n        let persons=null;\n\n        if(this.state.showPersons)\n        {\n            persons= (\n                <div>\n                    <Persons persons={this.state.persons}\n                             clicked={this.deletePersonHandler}\n                             changed={this.nameChangedHandler}\n                            />\n                </div>);\n        }\n\n        return (\n            <div className={App}>\n           <Cockpit\n               showPersons={this.state.showPersons}\n               persons={this.state. persons}\n               clicked={this.togglePersonHandler}\n               x={this.state.showButton}\n               />\n                {persons}\n            </div>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}